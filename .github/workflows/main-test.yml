# This is a basic workflow to help you get started with Actions

name: GitHub Actions Maven Build Example
on:
   push:
    branches: [ main ]
jobs:
  build-on-ubuntu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout main branch from GitHub 
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 - Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 20
    
      - name: Step 3 - Build Maven Project
        run: mvn  --batch-mode clean install package -DskipTests  
         
      - name: Step 4 - run test cases
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B   jacoco:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar jacoco:report  -Dsonar.projectKey=Organization-X0_Car-Accessories

                    - name: jacoco-reporter
  # You may pin to the exact commit or the version.
  # uses: PavanMudigonda/jacoco-reporter@76044ebc031589dcbce0bb1048ffee1072a43f97
  uses: PavanMudigonda/jacoco-reporter@v4.9
  with:
    # Path to the JaCoCo coverage results file which will be used to generate
a report. The only coverage results format supported is the
JaCoCo XML schema.

    coverage_results_path: 
    # Optionally specify the level of output detail for the test results.
May be one of: `none`, `Minimal`, `normal`, `detailed`, `diagnostic`
The default is `normal`.

    output_level: # optional
    # GITHUB_TOKEN to authenticate against API calls to attach
report to Workflow Run.

    github_token: # optional, default is ${{github.token}}
    # If true, will skip attaching the Tests Result report to
the Workflow Run using a Check Run.  Useful if you just
want to produce a Gist-based report via the `gist_name`
and `gist_token` input parameters.

    skip_check_run: # optional
    # Comma-separated list of one or more directories to scan for code 
coverage, relative to the root of the project. Will include all .ps1
and .psm1 files under these directories recursively.

    coverage_paths: # optional
    # The name of the code coverage report object that will be attached
to the Workflow Run.  Defaults to the name
`COVERAGE_RESULTS_<datetime>` where `<datetime>` is in the form
`yyyyMMdd_hhmmss`.

    coverage_report_name: # optional
    # The title of the code coverage report that will be embedded in the
report itself, which defaults to the same as the
`code_coverage_report_name` input.

    coverage_report_title: # optional
    # Minimum allowed coverage percentage as an integer.
    minimum_coverage: # optional
    # Fail the action when the minimum coverage was not met.
    fail_below_threshold: # optional
    # If true, will skip attaching the Tests Result report to the 
Workflow Run using a Check Run. Useful if your report has 65k 
characters that is not accepted by Github REST and GraphQL APIs

    publish_only_summary: # optional
          
